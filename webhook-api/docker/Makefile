.PHONY: up down logs clean restart mongo-logs mongo-shell status backup restore help

# Default environment file
ENV_FILE := ../.env

# Load environment variables
ifneq (,$(wildcard $(ENV_FILE)))
    include $(ENV_FILE)
    export
endif

# Help command
help:
	@echo "üê≥ Webhook MongoDB Docker Commands:"
	@echo ""
	@echo "  make up          - Start MongoDB and Mongo Express"
	@echo "  make down        - Stop all services"
	@echo "  make restart     - Restart all services"
	@echo "  make logs        - View all logs"
	@echo "  make mongo-logs  - View MongoDB logs only"
	@echo "  make mongo-shell - Open MongoDB shell"
	@echo "  make status      - Show service status"
	@echo "  make backup      - Create database backup"
	@echo "  make clean       - Remove containers and volumes"
	@echo ""

# Start all services
up:
	@echo "üöÄ Starting MongoDB and Mongo Express..."
	@echo "üìç Using environment file: $(ENV_FILE)"
	docker-compose --env-file $(ENV_FILE) up -d
	@echo "‚úÖ Services started!"
	@echo ""
	@echo "üåê Mongo Express: http://localhost:8081 (admin/admin123)"
	@echo "üóÑÔ∏è  MongoDB: mongodb://$(MONGO_USER):$(MONGO_PASSWORD)@localhost:$(MONGO_PORT)/$(MONGO_DATABASE)"

# Stop all services
down:
	@echo "‚èπÔ∏è  Stopping services..."
	docker-compose down

# View logs
logs:
	docker-compose logs -f

# View MongoDB logs only
mongo-logs:
	docker-compose logs -f mongodb

# Clean up (remove containers and volumes)
clean:
	@echo "üßπ Cleaning up containers and volumes..."
	docker-compose down -v --remove-orphans
	docker volume prune -f

# Restart services
restart: down up

# Open MongoDB shell
mongo-shell:
	@echo "üêö Opening MongoDB shell..."
	docker exec -it noreyni-mongodb mongosh -u $(MONGO_USER) -p $(MONGO_PASSWORD) --authenticationDatabase admin $(MONGO_DATABASE)

# Show service status
status:
	@echo "üìä Service Status:"
	docker-compose ps

# Create logs directory
create-logs-dir:
	@mkdir -p logs/mongodb

# Backup database
backup:
	@echo "üíæ Creating database backup..."
	@mkdir -p ./backups
	docker exec noreyni-mongodb mongodump --username $(MONGO_USER) --password $(MONGO_PASSWORD) --authenticationDatabase admin --db $(MONGO_DATABASE) --out /tmp/backup
	docker cp noreyni-mongodb:/tmp/backup ./backups/$(shell date +%Y%m%d_%H%M%S)
	@echo "‚úÖ Backup created in ./backups/"

# Restore database (usage: make restore BACKUP_DIR=./backups/20240115_143000)
restore:
	@if [ -z "$(BACKUP_DIR)" ]; then \
		echo "‚ùå Usage: make restore BACKUP_DIR=./backups/20240115_143000"; \
		exit 1; \
	fi
	@echo "üîÑ Restoring database from $(BACKUP_DIR)..."
	docker cp $(BACKUP_DIR) noreyni-mongodb:/tmp/restore
	docker exec noreyni-mongodb mongorestore --username $(MONGO_USER) --password $(MONGO_PASSWORD) --authenticationDatabase admin --db $(MONGO_DATABASE) --drop /tmp/restore/$(MONGO_DATABASE)
	@echo "‚úÖ Database restored successfully!"
